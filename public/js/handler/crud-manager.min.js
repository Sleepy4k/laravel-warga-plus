class CrudManager{constructor(e){this.debug=e.debug||!1,this.debug&&console.log("Initializing CrudManager with options:",e),this.tableId=e.tableId||null,!this.tableId||$(this.tableId).length?(this.routes=e.routes,this.forms=e.forms,this.offcanvas=e.offcanvas,this.sweetAlertEnabled=!1!==e.sweetAlertEnabled,this.onSuccess=e.onSuccess||this._defaultOnSuccess,this.onError=e.onError||this._defaultOnError,this.csrfToken=e.csrfToken||document.querySelector("meta[name='csrf-token']")?.getAttribute("content"),this.csrfToken||console.error("CSRF token not found. Please ensure you have <meta name='csrf-token' content='...' /> in your head section."),this.pageData=e.pageData||[],this.findFunction=e.findFunction||(e=>this.pageData.find((t=>t.id===e))),this.forms||(this.forms={add:{formId:"#form-add-new-record",submitBtnId:"#add-new-record-submit-btn"},edit:{formId:"#form-edit-record",submitBtnId:"#edit-record-submit-btn"},delete:{formId:"#form-delete-record"}}),this.init()):console.error(`Table with ID '${this.tableId}' not found. Please ensure it exists in the DOM.`)}init(){this._bindFormSubmission(),this._bindRecordDisplayAndEdit(),this._bindDeleteRecord()}_bindFormSubmission(){this.forms.add&&$(this.forms.add.submitBtnId).on("click",(e=>this._handleFormSubmission(e,this.forms.add.formId,"add"))),this.forms.edit&&$(this.forms.edit.submitBtnId).on("click",(e=>this._handleFormSubmission(e,this.forms.edit.formId,"edit")))}_handleFormSubmission(e,t,o){e.preventDefault();const s=$(t);if(s[0].checkValidity()){const e=new FormData(s[0]),i=s.attr("action");let r=s.attr("method")||"POST";["PUT","PATCH","DELETE"].includes(r.toUpperCase())&&"POST"!==r.toUpperCase()&&(e.append("_method",r.toUpperCase()),r="POST"),this.csrfToken&&!e.has("_token")&&e.append("_token",this.csrfToken),this._sendFormData(i,r,e,t,o)}else s.addClass("was-validated")}async _sendFormData(e,t,o,s,i){const r=$(s);r.find("input, select, textarea").prop("disabled",!0),$(this.forms[i].submitBtnId).prop("disabled",!0).html("Loading...");try{const i=await fetch(e,{method:t,body:o,headers:{Accept:"application/json"}}),n=await i.json();if(i.ok){this.onSuccess(n,s),r.removeClass("was-validated")[0].reset();const e=r.closest(".offcanvas");e.length&&bootstrap.Offcanvas.getInstance(e[0])?.hide(),this._refreshDataTable()}else this.onError(n,s)}catch(e){this.debug&&console.error("Fetch error:",e),this.onError({message:"A network error occurred or the server did not respond correctly."},s)}r.find("input, select, textarea").prop("disabled",!1),$(this.forms[i].submitBtnId).prop("disabled",!1).html("Submit")}_bindRecordDisplayAndEdit(){$(document).on("click",".show-record, .edit-record",(e=>{const t=$(e.currentTarget),o=t.data("id"),s=t.data("target");let i;if(this.debug&&console.log("Button clicked with data-id:",o),s===this.offcanvas.show?.id)i=this.offcanvas.show;else{if(s!==this.offcanvas.edit?.id)return void console.warn(`No offcanvas configuration found for target: ${s}`);i=this.offcanvas.edit}this._populateRecordData(o,i.fieldMap,s,t.hasClass("edit-record"))}))}_populateRecordData(e,t,o,s){let i=null;if(i=this.tableId&&$(this.tableId).length?$(this.tableId).DataTable().row((function(t,o){return o.id===e})).data():this.findFunction(e),i){for(const e in t){const o=t[e],r=$(o);if(0===r.length){console.warn(`Element with selector '${o}' not found for key '${e}'.`);continue}let n;s&&this.offcanvas.edit?.fieldMapBehavior?n=this.offcanvas.edit.fieldMapBehavior:!s&&this.offcanvas.show?.fieldMapBehavior&&(n=this.offcanvas.show.fieldMapBehavior);"object"==typeof n&&"function"==typeof n[e]?n[e](r,i[e],i):r.is("input")||r.is("textarea")||r.is("select")?e.includes("_at")?r.val(new Date(i[e]).toLocaleString()):r.is("select")&&s?r.val(i[e]).trigger("change"):r.val(i[e]):e.includes("_at")?r.text(new Date(i[e]).toLocaleString()):r.text(i[e])}if(s&&this.forms.edit&&this.routes.update){const t=this._getRoute(this.routes.update,e);$(this.forms.edit.formId).attr("action",t)}$(o).offcanvas("show")}else console.error("No data found for the given ID:",e)}_bindDeleteRecord(){this.forms.delete&&this.routes.destroy&&$(document).on("click",".delete-record",(e=>{const t=$(e.currentTarget).data("id");this._confirmAndDelete(t)}))}_confirmAndDelete(e){this.sweetAlertEnabled&&"undefined"!=typeof Swal?Swal.fire({title:"Are you sure?",text:"You won't be able to revert this!",icon:"warning",showCancelButton:!0,cancelButtonText:"No, cancel!",confirmButtonText:"Yes, delete it!",customClass:{confirmButton:"btn btn-label-danger",cancelButton:"btn btn-primary"}}).then((t=>{t.isConfirmed&&(Swal.fire({title:"Deleting Record...",text:"Please wait while the record is being deleted.",allowOutsideClick:!1,allowEscapeKey:!1,didOpen:()=>{Swal.showLoading()}}),this._performDelete(e))})):confirm("Are you sure you want to delete this record?")&&this._performDelete(e)}async _performDelete(e){const t=this._getRoute(this.routes.destroy,e);try{const e=await fetch(t,{method:"DELETE",headers:{Accept:"application/json","X-CSRF-TOKEN":this.csrfToken}}),o=await e.json();e.ok?(this.onSuccess(o,this.forms.delete.formId),this._refreshDataTable()):this.onError(o,this.forms.delete.formId)}catch(e){return this.debug&&console.error("Error performing delete:",e),void this.onError({message:"An error occurred while trying to delete the record."},this.forms.delete.formId)}}_refreshDataTable(){if(this.tableId&&$(this.tableId).length){$(this.tableId).DataTable().ajax.reload(null,!1)}else this.debug&&console.warn(`DataTable with selector '${this.tableId}' does not exist or is not initialized.`)}_defaultOnSuccess(e,t){this.debug&&console.log("Operation successful:",e),"undefined"!=typeof Swal?Swal.fire({icon:"success",title:"Success!",text:e.message||"Operation completed successfully.",showConfirmButton:!1,timer:1500}):alert(e.message||"Operation completed successfully.")}_defaultOnError(e,t){this.debug&&console.error("Operation failed:",e);let o="An unexpected error occurred.";if(t){const e=$(t);e.find(".is-invalid").removeClass("is-invalid"),e.find(".invalid-feedback").remove()}if(e.errors&&"object"==typeof e.errors){for(const[o,s]of Object.entries(e.errors))if(t){const e=$(`${t} [name="${o}"]`);if(e.length){e.addClass("is-invalid");const t=e.parent();0===t.find("> .invalid-feedback").length&&t.append(`<div class="invalid-feedback">${s.join("<br>")}</div>`)}}}else e.message&&(o=e.message);"undefined"!=typeof Swal?Swal.fire({icon:"error",title:"Oops...",html:o,confirmButtonText:"OK"}):alert("Error: "+o.replace(/<br>/g,"\n"))}_getRoute(e,t){return e.replace(":id",t)}}
