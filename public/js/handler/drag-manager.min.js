class DragManager{constructor(e){this.debug=e.debug||!1,this.debug&&console.log("Initializing DragManager with options:",e),this.menuData=e.data||{},this.userPermission=e.permissions||{},this.saveUrl=e.saveUrl||null,this.csrfToken=e.csrfToken||document.querySelector("meta[name='csrf-token']")?.getAttribute("content"),this.handleCreateMenu=e.handleCreateMenu||this._handleCreateMenu.bind(this),this.draggedItem=null,this.draggedItemId=null,this.draggedItemParentId=null,this.dropTargetElement=null,this.$menuList=$("#menu-list"),this.$saveButton=$("#save-button"),this.$saveButtonText=$("#save-button-text"),this.init()}init(){this.updateMenuOrder(),this.attachDragAndDropListeners(),this.$saveButton.on("click",this.handleSave.bind(this))}attachDragAndDropListeners(){this.debug&&console.log("Attaching drag and drop listeners."),$('[draggable="true"]').off("dragstart dragover dragleave drop dragend"),$("[data-droppable-id]").off("dragover dragleave drop"),this.$menuList.off("dragover dragleave drop"),$('[draggable="true"]').on({dragstart:this.handleDragStart.bind(this),dragover:this.handleDragOver.bind(this),dragleave:this.handleDragLeave.bind(this),drop:this.handleDrop.bind(this),dragend:this.handleDragEnd.bind(this)}),this.$menuList.on({dragover:this.handleDragOver.bind(this),dragleave:this.handleDragLeave.bind(this),drop:this.handleDrop.bind(this)}),$("ul[data-droppable-id]").on({dragover:this.handleDragOver.bind(this),dragleave:this.handleDragLeave.bind(this),drop:this.handleDrop.bind(this)})}updateMenuOrder(){this.debug&&console.log("Updating menu order."),this.$menuList.empty(),this.menuData.forEach((e=>{const t=this.handleCreateMenu(e,this.userPermission);this.$menuList.append(t)})),this.attachDragAndDropListeners()}handleDragStart(e){this.draggedItem=e.target,this.draggedItemId=$(this.draggedItem).data("id"),this.draggedItemParentId="null"===$(this.draggedItem).data("parentId")?null:$(this.draggedItem).data("parentId"),this.debug&&console.log("Drag started for item:",this.draggedItemId,"with parent:",this.draggedItemParentId),e.originalEvent.dataTransfer.setData("text/plain",JSON.stringify({id:this.draggedItemId,parentId:this.draggedItemParentId})),e.originalEvent.dataTransfer.effectAllowed="move",setTimeout((()=>{$(this.draggedItem).addClass("dragging")}),0)}handleDragOver(e){e.preventDefault();let t=e.target,r=$(t);for(;t&&t!==this.$menuList[0]&&!r.is("[draggable]")&&!r.is("[data-droppable-id]");)t=t.parentNode,r=$(t);if(t===this.draggedItem)return;this.dropTargetElement&&this.dropTargetElement!==t&&$(this.dropTargetElement).removeClass("drop-target-hover");const a="null"===r.data("parentId")?null:r.data("parentId"),d=r.data("droppableId");let n=!1;this.debug&&console.log("Drag over target:",t,"Target ID:",r.data("id"),"Target Parent ID:",a,"Dragged Item Parent ID:",this.draggedItemParentId),(t===this.$menuList[0]&&null===this.draggedItemParentId||r.is("[draggable]")&&null===a||r.is("[draggable]")&&null!==a&&this.draggedItemParentId===a||void 0!==d&&this.draggedItemParentId===d)&&(n=!0),n?(r.addClass("drop-target-hover"),this.dropTargetElement=t,e.originalEvent.dataTransfer.dropEffect="move"):e.originalEvent.dataTransfer.dropEffect="none"}handleDragLeave(e){this.dropTargetElement&&(this.debug&&console.log("Drag left target:",this.dropTargetElement),$(this.dropTargetElement).removeClass("drop-target-hover"),this.dropTargetElement=null)}handleDrop(e){if(e.preventDefault(),this.dropTargetElement&&$(this.dropTargetElement).removeClass("drop-target-hover"),!this.draggedItem)return;const t=JSON.parse(e.originalEvent.dataTransfer.getData("text/plain")),r=t.id,a=t.parentId;let d=e.target,n=$(d);for(;d&&d!==this.$menuList[0]&&!n.is("[draggable]")&&!n.is("[data-droppable-id]");)d=d.parentNode,n=$(d);if(!d||d===this.draggedItem)return;const i=n.data("id"),s="null"===n.data("parentId")?null:n.data("parentId"),o=n.data("droppableId");this.debug&&console.log("Drop event. Source ID:",r,"Source Parent:",a,"Target ID:",i,"Target Parent:",s,"Target Droppable ID:",o);let l=-1,g=null;if(null===a)g=this.menuData,l=this.menuData.findIndex((e=>e.id===r));else{const e=this.menuData.find((e=>e.id===a));e&&(g=e.children,l=e.children.findIndex((e=>e.id===r)))}if(-1===l||!g)return;const[h]=g.splice(l,1);let u=null,c=-1;if(null===a)if(null===s&&i){u=this.menuData,c=this.menuData.findIndex((e=>e.id===i));const t=d.getBoundingClientRect();e.originalEvent.clientY>t.top+t.height/2&&c++}else d===this.$menuList[0]&&(u=this.menuData,c=this.menuData.length);else if(s===a&&i){const t=this.menuData.find((e=>e.id===s));if(t){u=t.children,c=t.children.findIndex((e=>e.id===i));const r=d.getBoundingClientRect();e.originalEvent.clientY>r.top+r.height/2&&c++}}else if(void 0!==o&&o===a){const e=this.menuData.find((e=>e.id===o));e&&(u=e.children,c=e.children.length)}u&&-1!==c?(u.splice(c,0,h),this.debug&&console.log("Drop successful. New order:",this.menuData),this.updateMenuOrder()):(g.splice(l,0,h),this.debug&&console.log("Invalid drop target. Reverting to original position."))}handleDragEnd(e){this.draggedItem&&(this.debug&&console.log("Drag ended."),$(this.draggedItem).removeClass("dragging")),this.dropTargetElement&&$(this.dropTargetElement).removeClass("drop-target-hover"),this.draggedItem=null,this.draggedItemId=null,this.draggedItemParentId=null,this.dropTargetElement=null}handleSave(){if(!this.userPermission.update)return this.debug&&console.log("User does not have permission to update."),void("undefined"!=typeof Swal?Swal.fire({title:"Permission Denied",text:"You do not have permission to save the menu order.",icon:"error",confirmButtonText:"OK"}):alert("You do not have permission to save the menu order."));this.debug&&console.log("Saving new menu order."),this.$menuList.find("[draggable]").prop("draggable",!1),this.$saveButton.prop("disabled",!0),this.$saveButtonText.text("Saving...");const e=[];this.menuData.forEach(((t,r)=>{e.push({id:t.id,parent_id:null,order:r}),t.children&&t.children.length>0&&t.children.forEach(((r,a)=>{e.push({id:r.id,parent_id:t.id,order:a})}))})),this.debug&&console.log("Sending order to server:",e),$.ajax({url:this.saveUrl,method:"POST",data:{_token:this.csrfToken,order:e},success:e=>{"success"===e.status?"undefined"!=typeof Swal?Swal.fire({title:"Success",text:"Menu order saved successfully.",icon:"success",confirmButtonText:"OK"}).then((()=>{window.location.reload()})):(alert(e.message||"Menu order saved successfully."),setTimeout((()=>{window.location.reload()}),1e3)):"undefined"!=typeof Swal?Swal.fire({title:"Error",text:e.message||"Failed to save menu order.",icon:"error",confirmButtonText:"OK"}):alert(e.message||"An error occurred while saving the menu order.")},error:e=>{"undefined"!=typeof Swal?Swal.fire({title:"Error",text:e.responseJSON.message||"An error occurred while saving the menu order.",icon:"error",confirmButtonText:"OK"}):alert(e.responseJSON.message||"An error occurred while saving the menu order.")},complete:()=>{this.$saveButton.prop("disabled",!1),this.$saveButtonText.text("Save Order"),this.attachDragAndDropListeners()}})}_handleCreateMenu(e,t){const r=$("<li>").addClass("list-group-item border border-primary-subtle rounded-3 shadow-sm d-flex flex-column").attr({draggable:e.meta.is_sortable?"true":"false","data-id":e.id,"data-parent-id":"null"}),a=$("<div>").addClass("d-flex align-items-center gap-2 pb-2 mt-2"+(e.meta.is_sortable?" cursor-grab":"")).css("cursor",e.meta.is_sortable?"grab":"default").html(`\n      <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style="width: 1.5rem; height: 1.5rem; color: #6366f1;">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>\n      </svg>\n      <span class="flex-grow-1 fw-bold fs-5">${e.name}</span>\n      <span class="badge bg-primary text-white fs-6">\n        ${e.is_spacer?"Spacer":e.children.length>0?e.children.length+" items":"No children"}\n      </span>\n      <div class="dropdown">\n        <button class="btn btn-sm btn-light border-0 shadow-none d-flex align-items-center gap-1"\n          type="button" id="dropdownMenuButton-${e.id}" data-bs-toggle="dropdown" aria-expanded="false"\n          title="More actions" style="border: none; background: none;">\n          <i class="bx bx-dots-vertical-rounded fs-5"></i>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="dropdownMenuButton-${e.id}">\n          ${t.show?`<li><button class="dropdown-item d-flex align-items-center gap-2 show-record" data-id="${e.id}" data-target="#show-record"><i class="bx bx-info-circle text-primary"></i> Detail</button></li>`:""}\n          ${t.edit?`<li><button class="dropdown-item d-flex align-items-center gap-2 edit-record" data-id="${e.id}" data-target="#edit-record"><i class="bx bx-edit-alt text-warning"></i> Edit</button></li>`:""}\n          ${e.meta.is_sortable&&t.delete?`\n            <li><hr class="dropdown-divider"></li>\n            <li><button class="dropdown-item d-flex align-items-center gap-2 text-danger delete-record" data-id="${e.id}" data-target="#delete-record"><i class="bx bx-trash"></i> Delete</button></li>\n          `:""}\n        </ul>\n      </div>\n    `);if(r.append(a),!e.is_spacer&&e.children&&e.children.length>0){const a=$("<ul>").addClass("list-group children-list mt-2").attr("data-droppable-id",e.id);e.children.forEach((r=>{const d=$("<li>").addClass("list-group-item border border-secondary-subtle rounded-2 shadow-sm d-flex align-items-center gap-2 mb-2").attr({draggable:"true","data-id":r.id,"data-parent-id":e.id}).css("cursor","grab").html(`\n            <svg class="w-5 h-5 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style="width: 1.25rem; height: 1.25rem; color: #6c757d;">\n              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>\n            </svg>\n            <span class="flex-grow-1 fw-medium fs-6">${r.name}</span>\n            <div class="dropdown">\n              <button class="btn btn-sm btn-light border-0 shadow-none d-flex align-items-center gap-1"\n                type="button" id="dropdownMenuButton-child-${r.id}" data-bs-toggle="dropdown" aria-expanded="false"\n                title="More actions" style="border: none; background: none;">\n                <i class="bx bx-dots-vertical-rounded fs-5"></i>\n              </button>\n              <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="dropdownMenuButton-${r.id}">\n                ${t.show?`<li><button class="dropdown-item d-flex align-items-center gap-2 show-record" data-id="${r.id}" data-target="#show-record"><i class="bx bx-info-circle text-primary"></i> Detail</button></li>`:""}\n                ${t.edit?`<li><button class="dropdown-item d-flex align-items-center gap-2 edit-record" data-id="${r.id}" data-target="#edit-record"><i class="bx bx-edit-alt text-warning"></i> Edit</button></li>`:""}\n                ${e.meta.is_sortable&&t.delete?`\n                      <li><hr class="dropdown-divider"></li>\n                      <li><button class="dropdown-item d-flex align-items-center gap-2 text-danger delete-record" data-id="${r.id}" data-target="#delete-record"><i class="bx bx-trash"></i> Delete</button></li>\n                    `:""}\n              </ul>\n            </div>\n          `);a.append(d)})),r.append(a)}return r}}
