"use strict";document.addEventListener("DOMContentLoaded",function(e){(function(){const e=document.querySelector("#multiStepsValidation");if(void 0!==typeof e&&null!==e){const t=e.querySelector("#multiStepsForm"),n=t.querySelector("#accountDetailsValidation"),a=t.querySelector("#personalInfoValidation"),s=t.querySelector("#tosLinksValidation"),o=[].slice.call(t.querySelectorAll(".btn-next")),r=[].slice.call(t.querySelectorAll(".btn-prev"));let i=new Stepper(e,{linear:!0});const l=FormValidation.formValidation(n,{fields:{phone:{validators:{notEmpty:{message:"Please enter your phone number"},stringLength:{min:10,max:25,message:"Phone number must be between 10 and 25 characters long"},regexp:{regexp:/^8[1-9][0-9]{6,15}$/,message:"The phone number must be a valid Indonesian phone number. (e.g., 81234567890)"}}},identity_number:{validators:{notEmpty:{message:"Please enter your identity number"},stringLength:{min:10,max:20,message:"Identity number must be between 10 and 20 characters long"},regexp:{regexp:/^[0-9]{12,16}$/,message:"The identity number must be a valid Indonesian identity number"}}},password:{validators:{notEmpty:{message:"Please enter password"},stringLength:{min:8,max:20,message:"The password must be more than 8 and less than 20 characters long"}}},password_confirmation:{validators:{notEmpty:{message:"Confirm Password is required"},identical:{compare:function(){return n.querySelector('[name="password"]').value},message:"The password and its confirm are not the same"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:"",rowSelector:".col-sm-6"}),autoFocus:new FormValidation.plugins.AutoFocus,submitButton:new FormValidation.plugins.SubmitButton},init:e=>{e.on("plugins.message.placed",function(e){e.element.parentElement.classList.contains("input-group")&&e.element.parentElement.insertAdjacentElement("afterend",e.messageElement)})}}).on("core.form.valid",function(){i.next()}),m=FormValidation.formValidation(a,{fields:{first_name:{validators:{notEmpty:{message:"Please enter first name"},stringLength:{min:2,max:25,message:"The first name must be more than 2 and less than 25 characters long"}}},last_name:{validators:{notEmpty:{message:"Please enter last name"},stringLength:{min:2,max:25,message:"The first name must be more than 2 and less than 25 characters long"}}},gender:{validators:{notEmpty:{message:"Please select your gender"}}},birth_date:{validators:{notEmpty:{message:"Please select your birth date"},date:{format:"YYYY-MM-DD",message:"The value is not a valid date"}}},job:{validators:{notEmpty:{message:"Please enter your job"},stringLength:{min:2,max:50,message:"Job must be between 2 and 50 characters long"}}},address:{validators:{notEmpty:{message:"Please enter your address"},stringLength:{min:2,max:255,message:"The address must be more than 2 and less than 255 characters long"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:"",rowSelector:function(e,t){switch(e){case"address":return".col-md-12";default:return".col-sm-6"}}}),autoFocus:new FormValidation.plugins.AutoFocus,submitButton:new FormValidation.plugins.SubmitButton}}).on("core.form.valid",function(){i.next()}),d=FormValidation.formValidation(s,{fields:{agreement:{validators:{notEmpty:{message:"You must agree to the terms and conditions"}}},privacy_policy:{validators:{notEmpty:{message:"You must agree to the privacy policy"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap5:new FormValidation.plugins.Bootstrap5({eleValidClass:"",rowSelector:".col-12"}),autoFocus:new FormValidation.plugins.AutoFocus,submitButton:new FormValidation.plugins.SubmitButton},init:e=>{e.on("plugins.message.placed",function(e){e.element.parentElement.classList.contains("input-group")&&e.element.parentElement.insertAdjacentElement("afterend",e.messageElement)})}}).on("core.form.valid",function(){t.submit()});o.forEach(e=>{e.addEventListener("click",e=>{switch(i._currentIndex){case 0:l.validate();break;case 1:m.validate();break;case 2:d.validate()}})}),r.forEach(e=>{e.addEventListener("click",e=>{switch(i._currentIndex){case 2:case 1:i.previous()}})})}})()});